import React, { useState, useEffect } from 'react'
import Part from '../Part/CustomerPart';
import axios from 'axios';
import './Customer.scss'
import SmsModal from '../SmsModal/SmsModal';

export default function Customer(props) {
  const backend = import.meta.env.VITE_API_URL
  const customer = props.customer;
  const [open, setOpen] = useState(false);
  const [markedParts, setMarkedParts] = useState(customer.parts || []);
  const [customPartPrice, setCustomPartPrice] = useState(customer.partPrices || []);
  const [openParts, setOpenParts] = useState(false);
  const [showAllParts, setShowAllParts] = useState(false);
  const [openSmsModal, setOpenSmsModal] = useState(false);
  const [priceAccepted, setPriceAccepted] = useState(customer.priceAccepted || false);
  const [showButtons, setShowButtons] = useState(false);
  const [mechanicComments, setMechanicComments] = useState(customer.mechanicComments || "");
  const [groupedCustomerIds, setGroupedCustomerIds] = useState(customer.customerConnection || []);
  const [openGroupSelect, setOpenGroupSelect] = useState(false);

  const saveChanges = () => {
    console.log(priceAccepted)
    console.log(groupedCustomerIds);
    axios.patch(`${backend}/api/customer/${customer._id}`, {
      parts: markedParts,
      partPrices: customPartPrice,
      priceAccepted: priceAccepted,
      mechanicComments: mechanicComments,
      customerConnection: groupedCustomerIds,
    })
      .then(res => {
        console.log(res.data);
        props.update();
        props.setAlert({
          show: true,
          message: `${customer.name} ${customer.bikeNumber} sparad`,
          type: "success"
        })
      })
      .catch(err => {
        console.log(err);
        if (err.status == 401) {
          props.authenticate(saveChanges);
        }
      })
  }

  const archiveCustomer = () => {
    axios.post(`${backend}/api/archived/add`,
      customer
    )
      .then(res => {
        console.log(res.data);
        props.setAlert({
          show: true,
          message: `${customer.name} ${customer.bikeNumber} arkiverad`,
          type: "success"
        })
        deleteCustomer();
      })
      .catch(err => {
        console.log(err);
        if (err.status == 401) {
          props.authenticate(archiveCustomer);
        }
      })
  }

  const deleteCustomer = () => {
    axios.delete(`${backend}/api/customer/${customer._id}`)
      .then(res => {
        console.log(res.data);
        props.update();
      })
      .catch(err => {
        console.log(err);
        if (err.status == 401) {
          props.authenticate(deleteCustomer);
        }
      })
  }

  const sendPriceSMS = () => {
    console.log(customer);
    // Get marked parts with quantity
    const thingsToFix = markedParts.map(mp => {
      const part = props.parts.find(p => p._id === mp._id);
      if (!part) return null;
      const changedPrice = customPartPrice.find(_part => _part.id === part._id);
      return {
        ...part,
        price: changedPrice ? parseInt(changedPrice.price) : part.price,
        quantity: mp.quantity
      };
    }).filter(Boolean);

    const totalPrice = thingsToFix.reduce((total, part) => total + part.price * part.quantity, 0);

    const thingsToFixFormated = thingsToFix.map(part => {
      return "x" + part.quantity + " " + part.name + " " + (part.price * part.quantity) + "kr";
    }).join(', ');

    const message = `Hej, vi har nu kollat 칬ver er cykel och h칛r 칛r vad vi rekommenderar att g칬ra. Om allt 칛r ok med er s친 kommer vi p친b칬rja arbetet och 친terkomma n칛r den 칛r klar. Betalning sker n칛r cykeln 칛r redo att h칛mtas.%0A%0AAtt g칬ra/byta: ${thingsToFixFormated}%0A%0ATotalpris delar: ${totalPrice}kr%0A%0A%0A/Felix Cykelmeck`;

    console.log(totalPrice);

    window.open(`sms:${parseInt(customer.phone)}?body=${message}`)

    props.setAlert({
      show: true,
      message: `prisf칬rslag skickad`,
      type: "task"
    })
  }

  const sendDoneSMS = (lock) => {
    console.log(customer);

    const message = `Hej, cykeln 칛r nu redo att h칛mtas. Om du swishar till 1233740875 s친 st칛ller vi ut cykeln bakom staketet. Hoppas du 칛r n칬jd med servicen och om du vill f친r du g칛rna l칛mna en recension p친 Google游땕 Koden till l친set 칛r ${lock}%0A%0A%0Ahttps://g.page/r/CYBOBRAf1c9oEAE/review/%0A%0A%0AFelix Cykelmeck`;

    console.log(message);


    window.open(`sms:${parseInt(customer.phone)}?body=${message}`)

    props.setAlert({
      show: true,
      message: `Klart besked skickad`,
      type: "task"
    })
  }


  return (
    <div className="customer">
      <div className="customer-top">
        <h2>{customer.name} {customer.bikeNumber}</h2>
        <span onClick={() => { setOpen(!open) }} className={`${open ? "open" : ""}`}><ion-icon name="chevron-down-outline"></ion-icon></span>
      </div>
      {open && (
        <div className='customer-content'>
          <h3>Info</h3>
          <div className="info-content">
            <div className="info-line">
              <h4>Namn</h4>
              <p>{customer.name}</p>
            </div>
            <div className="info-line">
              <h4>Email</h4>
              <p>{customer.email}</p>
            </div>
            <div className="info-line">
              <h4>Mobilnummer</h4>
              <p>{customer.phone}</p>
            </div>
            <div className="info-line">
              <h4>Beskrivning av cykel</h4>
              <p>{customer.bikeDescription}</p>
            </div>
            <div className="info-line">
              <h4>Cykel nummer</h4>
              <p>{customer.bikeNumber}</p>
            </div>
            {customer.comments && (
              <div className="info-line">
                <h4>Kommentar</h4>
                <p>{customer.comments}</p>
              </div>
            )}

            {(customer.partToFix.length > 0 || customer.alsoDo.length > 0) && (
              <div className="info-line">
                <h4>Saker att kolla p친</h4>
                {
                  customer.partToFix.map(part => {
                    return (
                      <p key={part}>{part}</p>
                    )
                  })
                }
                {
                  customer.alsoDo.map(part => {
                    return (
                      <p key={part}>{part}</p>
                    )
                  })
                }
              </div>
            )}

          </div>
          <div className="parts-container">
            <div className="parts-container-top">
              <h3>Delar</h3>
              <div className="right">
                <span onClick={() => { setShowAllParts(!showAllParts) }} >{showAllParts ? <ion-icon name="close-outline"></ion-icon> : <ion-icon name="pencil-outline"></ion-icon>}</span>
                <span onClick={() => { setOpenParts(!openParts) }} className={`${openParts ? "open" : ""}`}><ion-icon name="chevron-down-outline"></ion-icon></span>
              </div>
            </div>
            {openParts && (
              <div className="parts-list">
                {!showAllParts && !markedParts || !showAllParts && markedParts.length === 0 && (
                  <p>Inga delar valda</p>
                )}
                {
                  props.parts.filter(part => !part.parent).map(part => {
                    return (
                      <Part
                        key={part._id}
                        part={part}
                        allParts={props.allParts}
                        authenticate={props.authenticate}
                        page={"customer"}
                        markedParts={markedParts}
                        setMarkedParts={setMarkedParts}
                        customPartPrice={customPartPrice}
                        setCustomPartPrice={setCustomPartPrice}
                        showAllParts={showAllParts}
                      />
                    )
                  })
                }
              </div>
            )}
          </div>

          {(!props.connectedCustomerList.flat().includes(customer) || customer.customerConnection.length > 0) &&
            <div className="group-together-customers">
              <div className="group-together-customers-top">
                <h3>Gruppera kunder</h3>
                <span onClick={() => { setOpenGroupSelect(!openGroupSelect) }} className={`${openGroupSelect ? "open" : ""}`}><ion-icon name="chevron-down-outline"></ion-icon></span>
              </div>
              {openGroupSelect && (
                <div className="group-together-customers-list">
                  {props.customers
                    .filter(c => c._id !== customer._id)
                    .filter(c => {
                      // Show if in same group as current customer, or not in any group
                      const isInSameGroup = props.connectedCustomerList.some(group => group.some(groupCustomer => groupCustomer._id === customer._id) && group.some(groupCustomer => groupCustomer._id === c._id));
                      const isInOtherGroup = props.connectedCustomerList.some(group => !group.some(groupCustomer => groupCustomer._id === customer._id) && group.some(groupCustomer => groupCustomer._id === c._id));
                      return isInSameGroup || !isInOtherGroup;
                    })
                    .map(c => {
                      const checked = groupedCustomerIds.includes(c._id);
                      return (
                        <div className="input-row" key={c._id}>
                          <label htmlFor={c._id}>{c.name} {c.bikeNumber}</label>
                          <input
                            type="checkbox"
                            name={c._id}
                            id={c._id}
                            checked={checked}
                            onChange={e => {
                              setGroupedCustomerIds(prev => {
                                if (e.target.checked) {
                                  return [...prev, c._id];
                                } else {
                                  return prev.filter(id => id !== c._id);
                                }
                              })
                            }}
                          />
                        </div>
                      );
                    })}
                </div>
              )}
            </div>
          }

          <div className="mechanic-comments">
            <h3>Dina kommentarer</h3>
            <textarea name="mechanicComments" id="" rows="5" value={mechanicComments} onChange={(e) => setMechanicComments(e.target.value)} placeholder='Skriv dina kommentarer h칛r...'></textarea>
          </div>
          <div className="price-accept">
            <h3>Pris godk칛nd</h3>
            <input type="checkbox" name="priceAccepted" id="" checked={priceAccepted} onChange={() => setPriceAccepted(!priceAccepted)} />
          </div>

          <div className="buttons">
            <button className='primary-button' onClick={saveChanges}>Spara</button>
            <span className='buttons-menu' onClick={() => setShowButtons(!showButtons)}>{showButtons ? <ion-icon name="close"></ion-icon> : <ion-icon name="ellipsis-horizontal"></ion-icon>}</span>
          </div>
          {showButtons && (
            <div className="buttons-dropdown">
              <button className='primary-button' onClick={archiveCustomer}>Arkivera</button>
              <button className='primary-button' onClick={() => { setOpenSmsModal(true) }}>SMS</button>
              {openSmsModal &&
                <SmsModal customer={customer} sendPriceSMS={sendPriceSMS} sendDoneSMS={sendDoneSMS} closeModal={() => { setOpenSmsModal(false) }} />
              }
            </div>
          )}
        </div>
      )}
    </div>
  )
}